name: test-build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Existing steps...

      # Step 7: Deploy Docker image to EC2
      - name: Deploy Docker image to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Write private key to a file
          echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' > private_key.pem
          chmod 600 private_key.pem

          # Add EC2 host key to known_hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_HOST << EOF
            # Login to Docker
            $(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY)
            
            # Pull the latest Docker image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Stop and remove the existing container
            docker stop my-container || true
            docker rm my-container || true
            
            # Run the new container with port mapping
            docker run -d --name my-container -p 8080:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF

          # Clean up the private key file
          rm private_key.pem
