name: test-build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest code from the repository
      - uses: actions/checkout@v4

      # Step 2: Set up JDK 21 for the build process
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: mvn clean install

      # Step 4: Setup AWS ECR Details
      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 7: Deploy Docker image to EC2
      - name: Deploy Docker image to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Write private key to a file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy
          ssh -i private_key.pem ec2-user@$EC2_HOST << EOF
            # Login to Docker
            $(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY)
          
            # Pull the latest Docker image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
            # Stop and remove the existing container
            docker stop my-container || true
            docker rm my-container || true
          
            # Run the new container with port mapping
            docker run -d --name my-container -p 8080:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
